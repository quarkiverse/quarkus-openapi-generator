{@org.openapitools.codegen.CodegenModel m}
import com.fasterxml.jackson.annotation.JsonProperty;

{#if m.description}
/**
  * {m.description}
 **/
{/if}
{#include additionalModelTypeAnnotations.qute m=m/}
{#if m.discriminator && m.discriminator.mappedModels && !m.discriminator.mappedModels.empty}
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(
  value = "{m.discriminator.propertyBaseName}", // ignore manually set {m.discriminator.propertyBaseName}, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the {m.discriminator.propertyBaseName} to be set during deserialization
)
@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY, property = "{m.discriminator.propertyBaseName}", visible = true)
@com.fasterxml.jackson.annotation.JsonSubTypes({
{#for child in m.discriminator.mappedModels}
    @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = {child.modelName}.class, name = "{#if m.vendorExtensions.x-discriminator-value.or('') == ''}{child.mappingName}{#else}{m.vendorExtensions.x-discriminator-value}{/if}"),
{/for}
})
{#else}
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
{/if}
public class {m.classname} {#if m.parent}extends {m.parent}{/if}{#if serializableModel} implements java.io.Serializable{/if} {

    {#for v in m.vars}
    {#if !v.deprecated || openapi:genDeprecatedModelAttr(package, m.classname, codegen)}
    {#if v.isEnum}
    {#if v.isContainer && v.mostInnerItems}
    {#include enumClass.qute e=v/}
    {#else if !v.isContainer}

    {#include enumClass.qute e=v/}{/if}
    {/if}
    {#if v.description}
    /**
      * {v.description}
     **/
    {/if}
    {#if v.hasValidation || v.required}{#include beanValidation.qute p=v/}{/if}
    {#if v.isContainer}
    private {v.datatypeWithEnum} {v.name}{#if v.required && v.defaultValue} = {v.defaultValue}{/if};
    {#else}
    private {v.datatypeWithEnum} {v.name}{#if v.defaultValue} = {v.defaultValue}{/if};
    {/if}
    {/if}
    {/for}

    {#for v in m.vars}
    {#if !v.deprecated || openapi:genDeprecatedModelAttr(package, m.classname, codegen)}
    /**
    {#if v.description}
    * {v.description}
    {#else}
    * Get {v.name}
    {/if}
    {#if v.minimum}
    * minimum: {v.minimum}
    {/if}
    {#if v.maximum}
    * maximum: {v.maximum}
    {/if}
    * @return {v.name}
    **/
    @JsonProperty("{v.baseName}")
    {#if !v.required}
    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
    {/if}
    {#for ext in v.vendorExtensions.x-extra-annotation.orEmpty}
    {ext}
    {/for}
    {#if v.isEnum && v.isContainer}public {v.datatypeWithEnum} {v.getter}(){
        return {v.name};
    }{#else if v.isEnum && !v.isArray && !v.isMap}public {v.datatypeWithEnum} {v.getter}() {
        return {v.name};
    }{#else if !v.isEnum && !v.isArray && !v.isMap}public {v.datatype} {v.getter}() {
        return {v.name};
    }{#else if !v.isEnum && (v.isArray || v.isMap)}public {v.datatype} {v.getter}() {
        return {v.name};
    }{#else if !v.isEnum}public {v.datatype} {v.getter}() {
        return {v.name};
    }{/if}

    {#if !v.isReadOnly}
    /**
     * Set {v.name}
     **/
    public void {v.setter}({v.datatypeWithEnum} {v.name}) {
        this.{v.name} = {v.name};
    }

    public {m.classname} {v.name}({v.datatypeWithEnum} {v.name}) {
        this.{v.name} = {v.name};
        return this;
    }
    {#if v.isArray}
    public {m.classname} add{v.nameInPascalCase}Item({v.items.datatypeWithEnum} {v.name}Item) {
        if (this.{v.name} == null){
            {v.name} = {#if v.defaultValue}{v.defaultValue}{#else}new {#if v.uniqueItems}LinkedHashSet{/if}{#if !v.uniqueItems}ArrayList{/if}<>(){/if};
        }
        this.{v.name}.add({v.name}Item);
        return this;
    }
    {/if}
    {#if v.isMap}
    public {m.classname} put{v.nameInPascalCase}Item(String key, {v.items.datatypeWithEnum} {v.name}Item) {
           if (this.{v.name} == null){
                {v.name} = {#if v.defaultValue}{v.defaultValue}{#else}new HashMap<>(){/if};
            }
        this.{v.name}.put(key, {v.name}Item);
        return this;
    }
    {/if}
    {/if}

    {/if}
    {/for}
    {#include pojoAdditionalProperties.qute m=m additionalPropertiesAsAttribute=additionalPropertiesAsAttribute /}
    /**
     * Create a string representation of this pojo.
     **/
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class {m.classname} {\n");
        {#if m.parent}
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");{/if}
        {#for v in m.vars}
        {#if !v.deprecated || openapi:genDeprecatedModelAttr(package, m.classname, codegen)}
        sb.append("    {v.name}: ").append(toIndentedString({v.name})).append("\n");
        {/if}
        {/for}
        {#if m.isAdditionalPropertiesTrue && additionalPropertiesAsAttribute}sb.append("    additionalProperties: ").append(toIndentedString(this.additionalProperties)).append("\n");{/if}
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    {#include pojoQueryParam.qute m=m codegen=classes-codegen package=modelPackage/}
}
