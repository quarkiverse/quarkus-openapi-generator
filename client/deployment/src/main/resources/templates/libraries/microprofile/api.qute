package {package};

import java.util.List;
import java.util.Map;

{#if use-bean-validation}
{! https://github.com/OpenAPITools/openapi-generator/issues/18974 !}
import jakarta.validation.Valid;
{/if}

{#for imp in imports}
import {imp.import};
{/for}
{#if appName}
/**
  * {appName}
  * {#if appDescription}<p>{appDescription}</p>{/if}
  */
{/if}
@jakarta.ws.rs.Path("{#if useAnnotatedBasePath.or(false)}{contextPath}{/if}{commonPath}")
@org.eclipse.microprofile.rest.client.inject.RegisterRestClient({#if !defaultServerUrl.or('') == ''}baseUri="{defaultServerUrl}", {/if}configKey="{configKey}")
@io.quarkiverse.openapi.generator.annotations.GeneratedClass(value="{openapi:parseUri(inputSpec)}", tag = "{baseName}")
{#if enable-security-generation && openapi:hasAuthMethods(operations) }
@org.eclipse.microprofile.rest.client.annotation.RegisterProvider({package}.auth.CompositeAuthenticationProvider.class)
@org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders({package}.auth.AuthenticationPropagationHeadersFactory.class)
{/if}
@jakarta.enterprise.context.ApplicationScoped
{#for apiAnnotation in additionalApiTypeAnnotations.orEmpty}
{apiAnnotation}
{/for}
public interface {classname} {

    {#for op in operations.operation}
    {#if !op.isDeprecated || openapi:genDeprecatedApiAttr(package, classname, classes-codegen)}
     /**
    {#include operationJavaDoc.qute op=op/}
     */
    {#if op.hasAuthMethods}
    {#for auth in op.authMethods}
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}", operationId="{op.operationId}", method="{op.httpMethod}", path="{contextPath}{commonPath}{op.path.orEmpty}")
    {/for}
    {#else}
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="{defaultSecurityScheme}", openApiSpecId="{quarkus-generator.openApiSpecId}", operationId="{op.operationId}", method="{op.httpMethod}", path="{contextPath}{commonPath}{op.path.orEmpty}")
    {/if}
    @jakarta.ws.rs.{op.httpMethod}
    {#if op.subresourceOperation}
    @jakarta.ws.rs.Path("{op.path}")
    {/if}
    {#if op.hasConsumes}
    @jakarta.ws.rs.Consumes(\{{#for consume in op.consumes}"{consume.mediaType}"{#if consume_hasNext}, {/if}{/for}\})
    {/if}
    {#if op.hasProduces}
    @jakarta.ws.rs.Produces(\{{#for produce in op.produces}"{produce.mediaType}"{#if produce_hasNext}, {/if}{/for}\})
    {/if}
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("{op.operationIdOriginal}")
    {#for cbClassConfig in circuit-breaker.orEmpty}{#if cbClassConfig.key == str:fmt("%s.%s", package, classname)}
    {#for cbMethod in cbClassConfig.value.orEmpty}{#if cbMethod == op.nickname}
    @org.eclipse.microprofile.faulttolerance.CircuitBreaker
    {/if}{/for}
    {/if}{/for}
        {#if mutiny}
            {#if mutiny-operation-ids.get(op.operationIdOriginal) == "Multi"}
                {#if mutiny-return-response}
    public io.smallrye.mutiny.Multi<jakarta.ws.rs.core.Response> {op.nickname}(
                {#else}
                    {#if op.returnType == "void"}
    public io.smallrye.mutiny.Multi<jakarta.ws.rs.core.Response> {op.nickname}(
                    {#else}
    public io.smallrye.mutiny.Multi<{#if op.returnType}{op.returnType}{#else}jakarta.ws.rs.core.Response{/if}> {op.nickname}(
                    {/if}
                {/if}
            {#else}
                {#if mutiny-operation-ids.get(op.operationIdOriginal) == "Uni"}
                    {#if mutiny-return-response}
    public io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response> {op.nickname}(
                    {#else}
                        {#if op.returnType == "void"}
    public io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response> {op.nickname}(
                        {#else}
    public io.smallrye.mutiny.Uni<{#if op.returnType}{op.returnType}{#else}jakarta.ws.rs.core.Response{/if}> {op.nickname}(
                        {/if}
                    {/if}
                {#else}
                   {#if !mutiny-operation-ids}
                        {#if mutiny-return-response}
    public io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response> {op.nickname}(
                        {#else}
                            {#if op.returnType == "void"}
    public io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response> {op.nickname}(
                            {#else}
    public {#if op.returnType}io.smallrye.mutiny.Uni<{op.returnType}>{#else}io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response>{/if} {op.nickname}(
                            {/if}
                        {/if}
                    {#else}
                        {#if mutiny-operation-ids.get(op.operationIdOriginal)}
                            {#if op.returnType == "void"}
    public io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response> {op.nickname}(
                            {#else}
    public {#if op.returnType}io.smallrye.mutiny.Uni<{op.returnType}>{#else}io.smallrye.mutiny.Uni<jakarta.ws.rs.core.Response>{/if} {op.nickname}(
                            {/if}
                        {#else}
                            {#if return-response}
    public jakarta.ws.rs.core.Response {op.nickname}(
                            {#else}
                                {#if op.returnType == "void"}
    public jakarta.ws.rs.core.Response {op.nickname}(
                                {#else}
    public {#if op.returnType}{op.returnType}{#else}jakarta.ws.rs.core.Response{/if} {op.nickname}(
                                {/if}
                            {/if}
                        {/if}
                    {/if}
                {/if}
            {/if}
        {#else}
            {#if return-response}
    public jakarta.ws.rs.core.Response {op.nickname}(
            {#else}
                {#if op.returnType == "void"}
    public jakarta.ws.rs.core.Response {op.nickname}(
                {#else}
    public {#if op.returnType}{op.returnType}{#else}jakarta.ws.rs.core.Response{/if} {op.nickname}(
                {/if}
            {/if}
        {/if}
        {#if additionalRequestArgs}
            {#for arg in additionalRequestArgs}{!
                !}{arg}{#if arg_hasNext}, {/if}{/for}{!
            !}{#if op.hasFormParams || op.allParams},{/if}
        {/if}
        {#if op.hasFormParams}
        {#if is-resteasy-reactive}
        @jakarta.ws.rs.BeanParam {op.operationIdCamelCase}MultipartForm multipartForm{#if op.hasPathParams},{/if}
        {#else}
        @org.jboss.resteasy.annotations.providers.multipart.MultipartForm {op.operationIdCamelCase}MultipartForm multipartForm{#if op.hasPathParams},{/if}
        {/if}
        {#if use-bean-validation}
        {#for p in op.pathParams}@jakarta.validation.Valid {#include pathParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasQueryParams},{/if}
        {#for p in op.queryParams}@jakarta.validation.Valid {#include queryParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasCookieParams},{/if}
        {#for p in op.cookieParams}@jakarta.validation.Valid {#include cookieParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasHeaderParams},{/if}
        {#for p in op.headerParams}@jakarta.validation.Valid {#include headerParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasBodyParam},
        {#for p in op.bodyParams}@jakarta.validation.Valid {#include bodyParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{/if}
        {#else}
        {#for p in op.pathParams}{#include pathParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasQueryParams},{/if}
        {#for p in op.queryParams}{#include queryParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasCookieParams},{/if}
        {#for p in op.cookieParams}{#include cookieParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasHeaderParams},{/if}
        {#for p in op.headerParams}{#include headerParams.qute param=p/}{#if p_hasNext}, {/if}{/for}{#if op.hasBodyParam},{/if}
        {#for p in op.bodyParams}{#include bodyParams.qute param=p/}{#if p_hasNext}, {/if}{/for}
        {/if}
        {#else}
{#for p in op.allParams}
        {#if use-bean-validation}@jakarta.validation.Valid {/if}{!
    !}{#include pathParams.qute param=p/}{#include queryParams.qute param=p/}{#include bodyParams.qute param=p/}{#include headerParams.qute param=p/}{#include cookieParams.qute param=p/}{#if p_hasNext}, {/if}
{/for}{/if}
    );
    {#if op.hasFormParams}

    {#include multipartFormdataPojo.qute param=op/}
    {/if}

    {/if} {! check deprecated !}
    {/for}
}