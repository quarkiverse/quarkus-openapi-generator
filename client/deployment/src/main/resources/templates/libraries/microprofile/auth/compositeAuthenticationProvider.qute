package {apiPackage}.auth;

@jakarta.annotation.Priority(jakarta.ws.rs.Priorities.AUTHENTICATION)
{#for auth in oauthMethods.orEmpty}
@io.quarkiverse.openapi.generator.markers.OauthAuthenticationMarker(name="{auth.name}", openApiSpecId="{configKey}")
{/for}
{#for auth in httpBasicMethods.orEmpty}
@io.quarkiverse.openapi.generator.markers.BasicAuthenticationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}")
{/for}
{#for auth in httpBearerMethods.orEmpty}
@io.quarkiverse.openapi.generator.markers.BearerAuthenticationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}", scheme="{auth.scheme}")
{/for}
{#for auth in apiKeyMethods.orEmpty}
{#if auth.isKeyInQuery}
@io.quarkiverse.openapi.generator.markers.ApiKeyAuthenticationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}", apiKeyIn=io.quarkiverse.openapi.generator.providers.ApiKeyIn.query, apiKeyName="{auth.keyParamName}")
{#else if auth.isKeyInHeader}
@io.quarkiverse.openapi.generator.markers.ApiKeyAuthenticationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}", apiKeyIn=io.quarkiverse.openapi.generator.providers.ApiKeyIn.header, apiKeyName="{auth.keyParamName}")
{#else if auth.isKeyInCookie}
@io.quarkiverse.openapi.generator.markers.ApiKeyAuthenticationMarker(name="{auth.name}", openApiSpecId="{quarkus-generator.openApiSpecId}", apiKeyIn=io.quarkiverse.openapi.generator.providers.ApiKeyIn.cookie, apiKeyName="{auth.keyParamName}")
{/if}
{/for}
public class CompositeAuthenticationProvider implements jakarta.ws.rs.client.ClientRequestFilter {

    @jakarta.inject.Inject
    @io.quarkiverse.openapi.generator.OpenApiSpec(openApiSpecId="{quarkus-generator.openApiSpecId}")
    io.quarkiverse.openapi.generator.providers.CompositeAuthenticationProvider compositeProvider;

    @java.lang.Override
    public void filter(jakarta.ws.rs.client.ClientRequestContext context) throws java.io.IOException {
        compositeProvider.filter(context);
    };
}
