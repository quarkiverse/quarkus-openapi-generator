# Authentication properties
org.acme.openapi.security.auth.basic_auth/username=john
org.acme.openapi.security.auth.basic_auth/password=test
customAuth.additionalApiTypeAnnotations=@org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders,@org.eclipse.microprofile.rest.client.annotation.RegisterProvider(io.quarkiverse.openapi.generator.it.security.auth.DummyApiKeyAuthenticationProvider.class)

# since the file name has a space, we use the URI representation of this space here to not break the properties file
# see the RFC3986 for more info https://datatracker.ietf.org/doc/html/rfc3986
quarkus.openapi-generator.codegen.spec.open_weather_yaml.base-package=org.acme.openapi.weather.v2
quarkus.openapi-generator.open_weather_yaml.auth.app_id.api-key=12345

quarkus.openapi-generator.codegen.spec.open_weather_custom_security_yaml.enable-security-generation=false
quarkus.openapi-generator.codegen.spec.open_weather_custom_security_yaml.base-package=org.acme.openapi.weather.customsecurity
quarkus.openapi-generator.codegen.spec.open_weather_custom_security_yaml.additional-api-type-annotations=${customAuth.additionalApiTypeAnnotations}
quarkus.openapi-generator.open_weather_custom_security_yaml.auth.app_id.api-key=dummyKey

quarkus.openapi-generator.codegen.spec.fooopenapi_json.base-package=org.acme.openapi.foo
quarkus.openapi-generator.codegen.spec.fooopenapi_json.enable-security-generation=true
quarkus.openapi-generator.fooopenapi_json.auth.JWT.api-key=staticapikey

# Authentication properties
quarkus.openapi-generator.codegen.spec.open_weather_no_security_yaml.base-package=org.acme.openapi.weathernosec
quarkus.openapi-generator.open_weather_no_security_yaml.auth.app_id.api-key=12345


# KOGITO-6458 (https://issues.redhat.com/browse/KOGITO-6458) - generate auth bindings even if security definition is missing
# Note: The property value is the name of an existing securityScheme in the spec file
quarkus.openapi-generator.codegen.default-security-scheme=app_id

#Token propagation
quarkus.openapi-generator.codegen.spec.token_propagation_external_service1_yaml.base-package=org.acme.externalservice1
quarkus.openapi-generator.codegen.spec.token_propagation_external_service2_yaml.base-package=org.acme.externalservice2
quarkus.openapi-generator.codegen.spec.token_propagation_external_service3_yaml.base-package=org.acme.externalservice3
quarkus.openapi-generator.codegen.spec.token_propagation_external_service4_yaml.base-package=org.acme.externalservice4
quarkus.openapi-generator.codegen.spec.token_propagation_external_service5_yaml.base-package=org.acme.externalservice5

quarkus.rest-client.token_propagation_external_service1_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service2_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service3_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service4_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service5_yaml.url=${propagation-external-service-mock.url}

# default propagation for token_propagation_external_service1 invocation
quarkus.openapi-generator.token_propagation_external_service1_yaml.auth.service1_http_bearer.token-propagation=true
# default propagation for token_propagation_external_service2 invocation
quarkus.openapi-generator.token_propagation_external_service2_yaml.auth.service2_oauth2.token-propagation=true
# propagate the token coming in the header SERVICE3_HEADER_TO_PROPAGATE for token_propagation_external_service3 invocation
quarkus.openapi-generator.token_propagation_external_service3_yaml.auth.service3_http_bearer.token-propagation=true
quarkus.openapi-generator.token_propagation_external_service3_yaml.auth.service3_http_bearer.header-name=SERVICE3_HEADER_TO_PROPAGATE
# propagate the token coming in the header SERVICE4_HEADER_TO_PROPAGATE for token_propagation_external_service4 invocation
quarkus.openapi-generator.token_propagation_external_service4_yaml.auth.service4_oauth2.token-propagation=true
quarkus.openapi-generator.token_propagation_external_service4_yaml.auth.service4_oauth2.header-name=SERVICE4_HEADER_TO_PROPAGATE

# Oidc clients for the services that has oauth2 security.
# Oidc client used by the token_propagation_external_service2
quarkus.oidc-client.service2_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service2_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service2_oauth2.discovery-enabled=false
quarkus.oidc-client.service2_oauth2.client-id=kogito-app
quarkus.oidc-client.service2_oauth2.grant.type=client
quarkus.oidc-client.service2_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service2_oauth2.credentials.client-secret.value=secret

# Oidc client used by the token_propagation_external_service4
quarkus.oidc-client.service4_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service4_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service4_oauth2.discovery-enabled=false
quarkus.oidc-client.service4_oauth2.client-id=kogito-app
quarkus.oidc-client.service4_oauth2.grant.type=client
quarkus.oidc-client.service4_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service4_oauth2.credentials.client-secret.value=secret

# Oidc client used by the token_propagation_external_service5
quarkus.oidc-client.service5_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service5_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service5_oauth2.discovery-enabled=false
quarkus.oidc-client.service5_oauth2.client-id=kogito-app
quarkus.oidc-client.service5_oauth2.grant.type=client
quarkus.oidc-client.service5_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service5_oauth2.credentials.client-secret.value=secret