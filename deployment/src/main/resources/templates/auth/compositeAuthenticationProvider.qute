package {apiPackage}.auth;

import javax.inject.Inject;
import javax.annotation.PostConstruct;
import javax.ws.rs.Priorities;

import io.quarkus.arc.Priority;

import io.quarkiverse.openapi.generator.CodegenConfig;

{#if hasHttpBasicMethods}
import io.quarkiverse.openapi.generator.providers.BasicAuthenticationProvider;
{/if}
{#if hasApiKeyMethods}
import io.quarkiverse.openapi.generator.providers.ApiKeyAuthenticationProvider;
import io.quarkiverse.openapi.generator.providers.ApiKeyIn;
{/if}
{#if hasHttpBearerMethods}
import io.quarkiverse.openapi.generator.providers.BearerAuthenticationProvider;
{/if}
{#if hasOAuthMethods}
import io.quarkiverse.openapi.generator.providers.OAuth2AuthenticationProvider;
{/if}
import io.quarkiverse.openapi.generator.providers.AbstractCompositeAuthenticationProvider;
import io.quarkiverse.openapi.generator.providers.OperationAuthInfo;

@Priority(Priorities.AUTHENTICATION)
public class CompositeAuthenticationProvider extends AbstractCompositeAuthenticationProvider {

    @Inject
    CodegenConfig codegenConfig;

    @PostConstruct
    public void init() {
        {#for auth in httpBasicMethods.orEmpty}
        this.addAuthenticationProvider(new BasicAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/for}
        {#for auth in oauthMethods.orEmpty}
        this.addAuthenticationProvider(new OAuth2AuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/for}
        {#for auth in httpBearerMethods.orEmpty}
        this.addAuthenticationProvider(new BearerAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), "{auth.scheme}", codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/for}
        {#for auth in apiKeyMethods.orEmpty}
        {#if auth.isKeyInQuery}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.query, "{auth.keyParamName}", codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/if}
        {#if auth.isKeyInHeader}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.header, "{auth.keyParamName}", codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/if}
        {#if auth.isKeyInCookie}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.cookie, "{auth.keyParamName}", codegenConfig)
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
            .addOperation(OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build())
        {/if}
        {/for}
        {/if}
        {/for}
        {/for});
        {/if}
        {/for}
    }

}