package {apiPackage}.auth;

import static io.quarkiverse.openapi.generator.AuthConfig.TOKEN_PROPAGATION;

import java.io.IOException;
import java.util.Optional;

import jakarta.ws.rs.client.ClientRequestContext;
import jakarta.ws.rs.core.HttpHeaders;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.quarkiverse.openapi.generator.OpenApiGeneratorConfig;
import io.quarkiverse.openapi.generator.providers.AbstractAuthProvider;
import io.quarkus.oidc.client.filter.OidcClientRequestFilter;
import io.quarkus.oidc.common.runtime.OidcConstants;

@io.quarkus.arc.Priority(jakarta.ws.rs.Priorities.AUTHENTICATION)
@jakarta.enterprise.context.ApplicationScoped
public class {quarkus-generator.openApiSpecId}OAuth2AuthenticationProvider extends AbstractAuthProvider {

    private static final Logger LOGGER = LoggerFactory.getLogger({quarkus-generator.openApiSpecId}OAuth2AuthenticationProvider.class);

    private static final String SCHEMA_NAME = "oauth";

    private final OidcClientRequestFilterDelegate delegate;

    {quarkus-generator.openApiSpecId}OAuth2AuthenticationProvider() {
        // Required by CDI. Not supposed to be used.
        delegate = null;
    }

    @jakarta.inject.Inject
    public {quarkus-generator.openApiSpecId}OAuth2AuthenticationProvider(
            final OpenApiGeneratorConfig generatorConfig, final OidcClientRequestFilterDelegate delegate) {
        super("{quarkus-generator.openApiSpecId}", SCHEMA_NAME, generatorConfig);
        this.delegate = delegate;
        validateConfig();
    }

    @Override
    public void filter(ClientRequestContext requestContext) throws IOException {
        if (isTokenPropagation()) {
            String bearerToken = getTokenForPropagation(requestContext.getHeaders());
            bearerToken = sanitizeBearerToken(bearerToken);
            requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, OidcConstants.BEARER_SCHEME + " " + bearerToken);
        } else {
            delegate.filter(requestContext);
        }
    }

    private void validateConfig() {
        if (isTokenPropagation()) {
            LOGGER.warn("Token propagation was enabled for a the oauth2: {} securityScheme in the specification file: {}. " +
                    "This configuration can be done by using the property: {} and is not necessary a problem if the configuration is intentional.",
                    getName(), getOpenApiSpecId(), getCanonicalAuthConfigPropertyName(TOKEN_PROPAGATION));
        }
    }

    @jakarta.enterprise.context.ApplicationScoped
    static class OidcClientRequestFilterDelegate extends OidcClientRequestFilter {

        @Override
        protected Optional<String> clientId() {
            return Optional.of(SCHEMA_NAME);
        }
    }
}
